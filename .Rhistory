opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7)
m %>% addPolygons(
fillColor = ~state.name,
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE))
labels <- sprintf(
"<strong>%s</strong><br/>%s people / mi<sup>2</sup>",
state.name, state.name
) %>% lapply(htmltools::HTML)
m <- m %>% addPolygons(
fillColor = ~state.name,
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
m
##m %>% addLegend(state.name, values = ~state.name, opacity = 0.7, title = NULL,
##    position = "bottomright")
library(ggplot2)
library(readr)
library(dplyr)
library(RColorBrewer)
library(DT)
library(choroplethrMaps)
library(choroplethr)
setwd("C:/dev/bi_project")
hc <- read.csv("PlanAttributes.csv", stringsAsFactors = FALSE)
hc <- subset(hc, BusinessYear == "2014")
hc <- subset(hc, DentalOnlyPlan == "No")
head(hc$SBCHavingDiabetesCoinsurance, 100)
hc$SBCHavingDiabetesCoinsurance<- gsub('\\$', '', hc$SBCHavingDiabetesCoinsurance)
hc$SBCHavingDiabetesCoinsurance<- gsub(',', '', hc$SBCHavingDiabetesCoinsurance)
hc$coinsurance <- as.numeric(hc$SBCHavingDiabetesCoinsurance)
hc$coinsurance[is.na(hc$coinsurance)] <- 0
head(hc$coinsurance, 100)
counts <- table(hc$coinsurance)
barplot(counts, main="the coinsurance for the sample SBC scenario of having diabetes",
xlab="Dollar Amount")
df <- aggregate(hc$coinsurance, list(hc$StateCode), mean)
df
names(df) <- c("state", "coinsurance")
df
df$region<-stateFromLower(df$state)
df$value <- df$overall
summary(df)
coinsurance <- subset(hc, coinsurance > 0)
df <- aggregate(hc$coinsurance, list(hc$StateCode), mean)
df$region<-stateFromLower(df$Group.1)
df$value <- df$x
choro = StateChoropleth$new(df)
choro$title = "the coinsurance for the sample SBC scenario of having diabetes"
choro$set_num_colors(1)
myPalette <- colorRampPalette(brewer.pal(9, "Reds"))
choro$ggplot_polygon = geom_polygon(aes(fill = value), color = NA)
choro$ggplot_scale = scale_fill_gradientn(name = "Dollar amount", colours = myPalette(9))
choro$render()
coinsurance <- subset(coinsurance, BusinessYear == "2014")
dim(coinsurance)
coinsurance <- subset(coinsurance, BusinessYear == "2015")
dim(coinsurance)
library(tigris)
library(leaflet)
library(geojson)
states <- states(cb=T)
states <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
class(states)
names(states)
m <- leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
m %>% addPolygons()
bins <- c(0, 10, 20, 50, 100, 200, 500, 1000, Inf)
pal <- colorBin("YlOrRd", domain = states$density, bins = bins)
m %>% addPolygons(
fillColor = ~state.name,
weight = 2,
opacity = 1,
color = "yellow",
dashArray = "3",
fillOpacity = 0.7)
m %>% addPolygons(
fillColor = ~state.name,
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE))
labels <- sprintf(
"<strong>%s</strong><br/>%s people / mi<sup>2</sup>",
state.name, state.name
) %>% lapply(htmltools::HTML)
m <- m %>% addPolygons(
fillColor = ~state.name,
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
m
##m %>% addLegend(state.name, values = ~state.name, opacity = 0.7, title = NULL,
##    position = "bottomright")
library(ggplot2)
library(readr)
library(dplyr)
library(RColorBrewer)
library(DT)
library(choroplethrMaps)
library(choroplethr)
setwd("C:/dev/bi_project")
hc <- read.csv("PlanAttributes.csv", stringsAsFactors = FALSE)
hc <- subset(hc, BusinessYear == "2014")
hc <- subset(hc, DentalOnlyPlan == "No")
head(hc$SBCHavingDiabetesCoinsurance, 100)
hc$SBCHavingDiabetesCoinsurance<- gsub('\\$', '', hc$SBCHavingDiabetesCoinsurance)
hc$SBCHavingDiabetesCoinsurance<- gsub(',', '', hc$SBCHavingDiabetesCoinsurance)
hc$coinsurance <- as.numeric(hc$SBCHavingDiabetesCoinsurance)
hc$coinsurance[is.na(hc$coinsurance)] <- 0
head(hc$coinsurance, 100)
counts <- table(hc$coinsurance)
barplot(counts, main="the coinsurance for the sample SBC scenario of having diabetes",
xlab="Dollar Amount")
df <- aggregate(hc$coinsurance, list(hc$StateCode), mean)
df
names(df) <- c("state", "coinsurance")
df
df$region<-stateFromLower(df$state)
df$value <- df$overall
summary(df)
coinsurance <- subset(hc, coinsurance > 0)
df <- aggregate(hc$coinsurance, list(hc$StateCode), mean)
df$region<-stateFromLower(df$Group.1)
df$value <- df$x
choro = StateChoropleth$new(df)
choro$title = "the coinsurance for the sample SBC scenario of having diabetes"
choro$set_num_colors(1)
myPalette <- colorRampPalette(brewer.pal(9, "Reds"))
choro$ggplot_polygon = geom_polygon(aes(fill = value), color = NA)
choro$ggplot_scale = scale_fill_gradientn(name = "Dollar amount", colours = myPalette(9))
choro$render()
coinsurance <- subset(coinsurance, BusinessYear == "2014")
dim(coinsurance)
coinsurance <- subset(coinsurance, BusinessYear == "2015")
dim(coinsurance)
library(tigris)
library(leaflet)
library(geojson)
states <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
class(states)
names(states)
m <- leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
m %>% addPolygons()
bins <- c(0, 10, 20, 50, 100, 200, 500, 1000, Inf)
pal <- colorBin("YlOrRd", domain = states$density, bins = bins)
m %>% addPolygons(
fillColor = ~state.name,
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7)
m %>% addPolygons(
fillColor = ~state.name,
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE))
labels <- sprintf(
"<strong>%s</strong><br/>%s people / mi<sup>2</sup>",
state.name, state.name
) %>% lapply(htmltools::HTML)
m <- m %>% addPolygons(
fillColor = ~state.name,
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
m
##m %>% addLegend(state.name, values = ~state.name, opacity = 0.7, title = NULL,
##    position = "bottomright")
m %>% addPolygons(
fillColor = ~pal(density),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7)
m %>% addPolygons(
fillColor = ~pal,
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7)
m %>% addPolygons(
fillColor = ~pal,
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7)
m %>% addPolygons(
fillColor = pal,
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE))
bins <- c(0, 10, 20, 50, 100, 200, 500, 1000, Inf)
pal <- colorBin("YlOrRd", domain = states$LSAD, bins = bins)
m %>% addPolygons(
fillColor = ~pal,
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7)
states <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
library(tigris)
library(leaflet)
library(geojson)
states <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
states <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
class(states)
names(states)
m <- leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
m <- leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
m %>% addPolygons()
bins <- c(0, 10, 20, 50, 100, 200, 500, 1000, Inf)
pal <- colorBin("YlOrRd", domain = states$density, bins = bins)
pal <- colorBin("YlOrRd", domain = colorRampPalette(brewer.pal(9, "Reds")), bins = bins)
m %>% addPolygons(
fillColor = ~pal,
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7)
pal <- colorBin("Reds", domain = colorRampPalette(brewer.pal(9, "Reds")), bins = bins)
m %>% addPolygons(
fillColor = ~pal,
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7)
m %>% addPolygons(
fillColor = "Reds",
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7)
m %>% addPolygons(
fillColor = "yellow",
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7)
m %>% addPolygons(
fillColor = colorRampPalette(brewer.pal(9, "Reds")),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7)
pal <- colorBin("YlOrRd", domain = states$STATEFP, bins = bins)
m %>% addPolygons(
fillColor = ~pal,
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7)
pal <- colorBin("YlOrRd", domain = states$STATENS, bins = bins)
m %>% addPolygons(
fillColor = ~pal,
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7)
pal <- colorBin("YlOrRd", domain = states$ALAND, bins = bins)
m %>% addPolygons(
fillColor = ~pal,
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7)
pal <- colorBin("YlOrRd", domain = states$AWATER, bins = bins)
m %>% addPolygons(
fillColor = ~pal,
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7)
myPalette <- colorRampPalette(brewer.pal(9, "Reds"))
m %>% addPolygons(
fillColor = scale_fill_gradientn(name = "Dollar amount", colours = myPalette(9)),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7)
m %>% addPolygons(
fillColor = ~scale_fill_gradientn(name = "Dollar amount", colours = myPalette(9)),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7)
m %>% addPolygons(
fillColor = myPalette(9),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7)
m %>% addPolygons(
fillColor = myPalette(9),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE))
labels <- sprintf(
"<strong>%s</strong><br/>%s people / mi<sup>2</sup>",
state.name, state.name
) %>% lapply(htmltools::HTML)
m <- m %>% addPolygons(
fillColor = myPalette(9),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
m
m %>% addLegend(pal = pal, values = myPalette(9), opacity = 0.7, title = NULL,
position = "bottomright")
m %>% addLegend(pal = pal, values = myPalette(9), opacity = 0.7, title = amount of dollar,
position = "bottomright")
m %>% addLegend(pal = pal, values = myPalette(9), opacity = 0.7, title = "amount of dollar",
position = "bottomright")
library(ggplot2)
library(readr)
library(dplyr)
library(choroplethr)
library(extrafont)
library(extrafontdb)
library(RColorBrewer)
library(scales)
library(gridExtra)
library(choroplethrMaps)
##Setwd for omar besic
##setwd("C:/Users/omarb/Desktop/Studium/6. Semester/
##      06_Business Intelligence im Spital/Projekt/bi_project")
##Setwd for musab elkour
##setwd("C:/dev/bi_project")
# import data with help of the readr package and reads comma delimited files
planAttributes <- read.csv("PlanAttributes.csv", stringsAsFactors = FALSE)
# planAttributes <- planAttributes %>% filter(planAttributes$BusinessYear == 2014)
# planAttributes <- planAttributes %>% filter(planAttributes$BusinessYear == 2016)
# Maximum Out of Pocket for Medical and Drug EHB Benefits (Total),
# In Network (Tier 1), Family
# The max out of pocket is the amount of money that the family would
# have to pay before the insurance covers everything 100%
# Give me the TEHBInnTier1FamilyMOOP column just for a short glimpse
planAttributes <- planAttributes %>% select(TEHBInnTier1FamilyMOOP)
# replace all "," with " " in TEHBInnTier1FamilyMOOP
# as example: given = $12,600 BUT wanted = $12600
planAttributes$TEHBInnTier1FamilyMOOP<- gsub(',', '', planAttributes$TEHBInnTier1FamilyMOOP)
# replace all "\\$" with " " in TEHBInnTier1FamilyMOOP
# as example: given = $12600 BUT wanted = 12600
planAttributes$TEHBInnTier1FamilyMOOP<- gsub('\\$', '', planAttributes$TEHBInnTier1FamilyMOOP)
# assign (and convert to numeric) the maximum out of pocket column to planAttributes$moop
planAttributes$moop<- as.numeric(planAttributes$TEHBInnTier1FamilyMOOP)
# fill the blank cells with 0
planAttributes$moop[is.na(planAttributes$moop)] <- 0
# plot histogram of moop
ggplot(planAttributes, aes(x = planAttributes$moop)) + geom_histogram()
# Thereâs a lot of plans in there that have a zero family MOOP. Thatâs not accurate.
# I will only stick to plans that actually have a dollar amount.
moop <- subset(planAttributes, moop > 0)
# choroplethr is used for plotting maps
# Iâm going to map this to see which states have the worst MOOP on average for a family.
# I used a function that turns state abbreviations to a format
# that choropleth can actually use.
# aggregate from planAttributes$moop and group by list(planAttributes$StateCode), take mean
planAttributes <- aggregate(planAttributes$moop, list(planAttributes$StateCode), mean)
# converts states abbreviations
source("function_stateFromLower.R")
# For the data frame method, a data frame with columns corresponding to the grouping variables
# in by followed by aggregated columns from x. If the by has names, the non-empty times
# are used to label the columns in the results, with unnamed grouping variables being named
# Group.i for by[[i]]. -> in this case first group "Group.1" is group of all states
planAttributes$region <- stateFromLower(planAttributes$Group.1)
# assign planAttributes$x (means of moop by state) to planAttributes$value
planAttributes$value <- planAttributes$x
# generate new choro object
?StateChoropleth
choro = StateChoropleth$new(planAttributes)
# set title to the new choro chart
choro$title = "Average Max Out of Pocket"
# The number of colors to use on the map. A value of 0 uses a divergent scale
# (useful for visualizing negative and positive numbers), A value of 1 uses a continuous
# scale (useful for visualizing outliers), and a value in [2, 9] will use that many quantiles.
choro$set_num_colors(1)
# These functions are useful for converting hand-designed `sequential' or `diverging' color
# schemes into continous color ramps eg for image and filled contour plots.
myPalette <- colorRampPalette(brewer.pal(9, "Reds"))
choro$ggplot_polygon = geom_polygon(aes(fill = value), color = NA)
choro$ggplot_scale = scale_fill_gradientn(name = "MOOP", colours = myPalette(9))
choro$render()
