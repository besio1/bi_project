#We’ll generate the labels by handcrafting some HTML, and passing it to lapply(htmltools::HTML) so that Leaflet knows to treat each label as HTML instead of as plain text. We’ll also set some label options to improve the style of the label element itself.
labels <- sprintf(
paste0("<strong>", states$name,
"</strong><br />Densitiy: ", states$density,
"<br /> Region: ", df$region,
"<br /> Coinsurance mean: ", mean(hc$coinsurance)
"<br /> Region: ", df$value
)
)  %>% lapply(htmltools::HTML)
#Custom infos
#We’ll generate the labels by handcrafting some HTML, and passing it to lapply(htmltools::HTML) so that Leaflet knows to treat each label as HTML instead of as plain text. We’ll also set some label options to improve the style of the label element itself.
labels <- sprintf(
paste0("<strong>", states$name,
"</strong><br />Densitiy: ", states$density,
"<br /> Region: ", df$region,
"<br /> Coinsurance mean: ", mean(hc$coinsurance),
"<br /> Region: ", df$value
)
)  %>% lapply(htmltools::HTML)
m <- m %>% addPolygons(
fillColor = ~pal(density),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
m
#Custom infos
#We’ll generate the labels by handcrafting some HTML, and passing it to lapply(htmltools::HTML) so that Leaflet knows to treat each label as HTML instead of as plain text. We’ll also set some label options to improve the style of the label element itself.
labels <- sprintf(
paste0("<strong>", states$name,
"</strong><br />Densitiy: ", states$density,
"<br /> Region: ", df$region,
"<br /> Coinsurance mean: ", mean(hc$coinsurance),
"<br /> Region: ", df$region
)
)  %>% lapply(htmltools::HTML)
m <- m %>% addPolygons(
fillColor = ~pal(density),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
m
#Custom infos
#We’ll generate the labels by handcrafting some HTML, and passing it to lapply(htmltools::HTML) so that Leaflet knows to treat each label as HTML instead of as plain text. We’ll also set some label options to improve the style of the label element itself.
labels <- sprintf(
paste0("<strong>", states$name,
"</strong><br />Densitiy: ", states$density,
"<br /> Region: ", df$region,
"<br /> Coinsurance mean: ", mean(hc$coinsurance),
"<br /> Region: ", states$name
)
)  %>% lapply(htmltools::HTML)
m <- m %>% addPolygons(
fillColor = ~pal(density),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
m
#Custom infos
#We’ll generate the labels by handcrafting some HTML, and passing it to lapply(htmltools::HTML) so that Leaflet knows to treat each label as HTML instead of as plain text. We’ll also set some label options to improve the style of the label element itself.
labels <- sprintf(
paste0("<strong>", states$name,
"</strong><br />Densitiy: ", states$density,
"<br /> Region: ", df$region,
"<br /> Coinsurance mean: ", mean(hc$coinsurance),
"<br /> Region: ", mean(SBCHavingDiabetesCoinsurance)
)
)  %>% lapply(htmltools::HTML)
m <- m %>% addPolygons(
fillColor = ~pal(density),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
m
#Custom infos
#We’ll generate the labels by handcrafting some HTML, and passing it to lapply(htmltools::HTML) so that Leaflet knows to treat each label as HTML instead of as plain text. We’ll also set some label options to improve the style of the label element itself.
labels <- sprintf(
paste0("<strong>", states$name,
"</strong><br />Densitiy: ", states$density,
"<br /> Region: ", df$region,
"<br /> Coinsurance mean: ", mean(hc$coinsurance),
"<br /> Region: ", mean(hc$SBCHavingDiabetesCoinsurance)
)
)  %>% lapply(htmltools::HTML)
#Custom infos
#We’ll generate the labels by handcrafting some HTML, and passing it to lapply(htmltools::HTML) so that Leaflet knows to treat each label as HTML instead of as plain text. We’ll also set some label options to improve the style of the label element itself.
labels <- sprintf(
paste0("<strong>", states$name,
"</strong><br />Densitiy: ", states$density,
"<br /> Region: ", df$region,
"<br /> Coinsurance mean: ", mean(hc$coinsurance),
"<br /> Region: ", mean(df$SBCHavingDiabetesCoinsurance)
)
)  %>% lapply(htmltools::HTML)
#Custom infos
#We’ll generate the labels by handcrafting some HTML, and passing it to lapply(htmltools::HTML) so that Leaflet knows to treat each label as HTML instead of as plain text. We’ll also set some label options to improve the style of the label element itself.
labels <- sprintf(
paste0("<strong>", states$name,
"</strong><br />Densitiy: ", states$density,
"<br /> Region: ", df$region,
"<br /> Coinsurance mean: ", mean(hc$coinsurance),
"<br /> Region: ", mean(coinsurance$SBCHavingDiabetesCoinsurance)
)
)  %>% lapply(htmltools::HTML)
#Custom infos
#We’ll generate the labels by handcrafting some HTML, and passing it to lapply(htmltools::HTML) so that Leaflet knows to treat each label as HTML instead of as plain text. We’ll also set some label options to improve the style of the label element itself.
labels <- sprintf(
paste0("<strong>", states$name,
"</strong><br />Densitiy: ", states$density,
"<br /> Region: ", df$region,
"<br /> Coinsurance mean: ", mean(hc$coinsurance),
"<br /> Region: ", mean(hc$AVCalculatorOutputNumber)
)
)  %>% lapply(htmltools::HTML)
#Custom infos
#We’ll generate the labels by handcrafting some HTML, and passing it to lapply(htmltools::HTML) so that Leaflet knows to treat each label as HTML instead of as plain text. We’ll also set some label options to improve the style of the label element itself.
labels <- sprintf(
paste0("<strong>", states$name,
"</strong><br />Densitiy: ", states$density,
"<br /> Region: ", df$region,
"<br /> Coinsurance mean: ", mean(hc$coinsurance),
"<br /> Region: ", hc$BusinessYear
)
)  %>% lapply(htmltools::HTML)
m <- m %>% addPolygons(
fillColor = ~pal(density),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
m
#Custom infos
#We’ll generate the labels by handcrafting some HTML, and passing it to lapply(htmltools::HTML) so that Leaflet knows to treat each label as HTML instead of as plain text. We’ll also set some label options to improve the style of the label element itself.
labels <- sprintf(
paste0("<strong>", states$name,
"</strong><br />Densitiy: ", states$density,
"<br /> Region: ", df$region,
"<br /> Coinsurance mean: ", mean(hc$coinsurance),
"<br /> Businessyear: ", hc$BusinessYear,
"<br /> Businessyear: ", mean(hc$DEHBCombInnOonFamilyMOOP)
)
)  %>% lapply(htmltools::HTML)
#Custom infos
#We’ll generate the labels by handcrafting some HTML, and passing it to lapply(htmltools::HTML) so that Leaflet knows to treat each label as HTML instead of as plain text. We’ll also set some label options to improve the style of the label element itself.
labels <- sprintf(
paste0("<strong>", states$name,
"</strong><br />Densitiy: ", states$density,
"<br /> Region: ", df$region,
"<br /> Coinsurance mean: ", mean(hc$coinsurance),
"<br /> Businessyear: ", hc$BusinessYear,
"<br /> Businessyear: ", mean(as.numeric(hc$SBCHavingDiabetesCoinsurance))
)
)  %>% lapply(htmltools::HTML)
m <- m %>% addPolygons(
fillColor = ~pal(density),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
m
#Custom infos
#We’ll generate the labels by handcrafting some HTML, and passing it to lapply(htmltools::HTML) so that Leaflet knows to treat each label as HTML instead of as plain text. We’ll also set some label options to improve the style of the label element itself.
labels <- sprintf(
paste0("<strong>", states$name,
"</strong><br />Densitiy: ", states$density,
"<br /> Region: ", df$region,
"<br /> Coinsurance mean: ", mean(hc$coinsurance),
"<br /> Businessyear: ", hc$BusinessYear,
"<br /> Businessyear: ", mean(hc$SBCHavingDiabetesCoinsurance),
)
)  %>% lapply(htmltools::HTML)
#Custom infos
#We’ll generate the labels by handcrafting some HTML, and passing it to lapply(htmltools::HTML) so that Leaflet knows to treat each label as HTML instead of as plain text. We’ll also set some label options to improve the style of the label element itself.
labels <- sprintf(
paste0("<strong>", states$name,
"</strong><br />Densitiy: ", states$density,
"<br /> Region: ", df$region,
"<br /> Coinsurance mean: ", mean(hc$coinsurance),
"<br /> Businessyear: ", hc$BusinessYear,
"<br /> Businessyear: ", mean(as.numeric(hc$SBCHavingDiabetesCoinsurance)),
)
)  %>% lapply(htmltools::HTML)
#Custom infos
#We’ll generate the labels by handcrafting some HTML, and passing it to lapply(htmltools::HTML) so that Leaflet knows to treat each label as HTML instead of as plain text. We’ll also set some label options to improve the style of the label element itself.
labels <- sprintf(
paste0("<strong>", states$name,
"</strong><br />Densitiy: ", states$density,
"<br /> Region: ", df$region,
"<br /> Coinsurance mean: ", mean(hc$coinsurance),
"<br /> Businessyear: ", hc$BusinessYear,
"<br /> Businessyear: ", mean(as.numeric(hc$SBCHavingDiabetesCoinsurance))
)
)  %>% lapply(htmltools::HTML)
m <- m %>% addPolygons(
fillColor = ~pal(density),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
m
#Custom infos
#We’ll generate the labels by handcrafting some HTML, and passing it to lapply(htmltools::HTML) so that Leaflet knows to treat each label as HTML instead of as plain text. We’ll also set some label options to improve the style of the label element itself.
labels <- sprintf(
paste0("<strong>", states$name,
"</strong><br />Densitiy: ", states$density,
"<br /> Region: ", df$region,
"<br /> Having Diabetes Coinsurance mean: ", mean(hc$coinsurance),
"<br /> Businessyear: ", hc$BusinessYear,
)
)  %>% lapply(htmltools::HTML)
#Custom infos
#We’ll generate the labels by handcrafting some HTML, and passing it to lapply(htmltools::HTML) so that Leaflet knows to treat each label as HTML instead of as plain text. We’ll also set some label options to improve the style of the label element itself.
labels <- sprintf(
paste0("<strong>", states$name,
"</strong><br />Densitiy: ", states$density,
"<br /> Region: ", df$region,
"<br /> Having Diabetes Coinsurance mean: ", mean(hc$coinsurance),
"<br /> Businessyear: ", hc$BusinessYear
)
)  %>% lapply(htmltools::HTML)
m <- m %>% addPolygons(
fillColor = ~pal(density),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
m
#Custom infos
#We’ll generate the labels by handcrafting some HTML, and passing it to lapply(htmltools::HTML) so that Leaflet knows to treat each label as HTML instead of as plain text. We’ll also set some label options to improve the style of the label element itself.
labels <- sprintf(
paste0("<strong>", states$name,
"</strong><br />Densitiy: ", states$density,
"<br /> Region: ", df$region,
"<br /> Having Diabetes Coinsurance mean: ", mean(hc$coinsurance),
"<br /> Businessyear: ", aggregate(hc$BusinessYear, list(hc$StateCode), mean)
)
)  %>% lapply(htmltools::HTML)
m <- m %>% addPolygons(
fillColor = ~pal(density),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
m
#------------------------choro Map creation -------------------------------------
#Aggregate the coinsurance with statecodes
df <- aggregate(hc$coinsurance, list(hc$StateCode), mean)
#calling the states from the function stateFromLower
# Group.i for by[[i]]. -> in this case first group "Group.1" is group of all states
df$region<-stateFromLower(df$Group.1)
df$value <- df$x
#generate new choro object
choro = StateChoropleth$new(df)
# set title to the new choro map
choro$title = "    The coinsurance for the sample SBC scenario of having diabetes"
# The number of colors to use on the map. A value of 0 uses a divergent scale
choro$set_num_colors(1)
# These functions are useful for converting hand-designed `sequential' or `diverging' color
# here green levels set
myPalette <- colorRampPalette(brewer.pal(9, "Greens"))
#fill value and border color
choro$ggplot_polygon = geom_polygon(aes(fill = value), color = "black")
#legend
choro$ggplot_scale = scale_fill_gradientn(name = "Dollar amount", colours = myPalette(9))
#show and visualizie the choro map
choro$render()
ggplot(hc, aes(x=reorder(Group.1, -x), y = x)) + geom_bar(aes(fill=conference),stat="identity")  + ylim(0,.5) + theme(axis.text.x = element_text(angle = 90)) + xlab("Opponent's Name") + ylab("Shooting Percentage") + geom_hline(yintercept = .43)
ggplot(hc, aes(x=reorder(Group.1, -x), y = x)) + geom_bar(aes(fill=coinsurance),stat="identity")  + ylim(0,.5) + theme(axis.text.x = element_text(angle = 90)) + xlab("Opponent's Name") + ylab("Shooting Percentage") + geom_hline(yintercept = .43)
ggplot(hc, aes(x=reorder(stateFromLower(df$Group.1), -x), y = x)) + geom_bar(aes(fill=coinsurance),stat="identity")  + ylim(0,.5) + theme(axis.text.x = element_text(angle = 90)) + xlab("Opponent's Name") + ylab("Shooting Percentage") + geom_hline(yintercept = .43)
ggplot(histogram, aes(x=Group.1, y = x/1000)) + geom_bar(aes(fill=throw),stat="identity", position= "dodge") + xlab("Season") + ylab("Salary (in thousands)") + scale_fill_manual(values=handPalette)
ggplot(hc, aes(x=Group.1, y = x/1000)) + geom_bar(aes(fill=throw),stat="identity", position= "dodge") + xlab("Season") + ylab("Salary (in thousands)") + scale_fill_manual(values=handPalette)
ggplot(hc, aes(x=Group.1, y = x/1000)) + geom_bar(aes(fill=throw),stat="identity", position= "dodge") + xlab("Season") + ylab("Salary (in thousands)") + scale_fill_manual(values=coinsurance)
ggplot(hc, aes(x=counts, y = x/1000)) + geom_bar(aes(fill=throw),stat="identity", position= "dodge") + xlab("Season") + ylab("Salary (in thousands)") + scale_fill_manual(values=coinsurance)
ggplot(hc, aes(x=counts, y = 1)) + geom_bar(aes(fill=throw),stat="identity", position= "dodge") + xlab("Season") + ylab("Salary (in thousands)") + scale_fill_manual(values=coinsurance)
ggplot(hc, aes(x=hc$coinsurance)) + geom_bar(aes(fill=throw),stat="identity", position= "dodge") + xlab("Season") + ylab("Salary (in thousands)") + scale_fill_manual(values=coinsurance)
ggplot(hc, aes(x=hc$coinsurance)) + geom_bar(aes(fill=hc$coinsurance),stat="identity", position= "dodge") + xlab("Season") + ylab("Salary (in thousands)") + scale_fill_manual(values=coinsurance)
ggplot(hc, aes(x=hc$coinsurance)) + geom_bar(aes(fill=hc$coinsurance, y=hc$coinsurance),stat="identity", position= "dodge") + xlab("Season") + ylab("Salary (in thousands)") + scale_fill_manual(values=coinsurance)
#show and visualizie the choro map
choro$render()
#Custom infos
#We’ll generate the labels by handcrafting some HTML, and passing it to lapply(htmltools::HTML) so that Leaflet knows to treat each label as HTML instead of as plain text. We’ll also set some label options to improve the style of the label element itself.
labels <- sprintf(
paste0("<strong>", states$name,
"</strong><br />Densitiy: ", states$density,
"<br /> Region: ", df$region,
"<br /> Having Diabetes Coinsurance mean: ", mean(hc$coinsurance),
"<br /> Businessyear: ", hc$BusinessYear,
"<br /> value: ", df$value
)
)  %>% lapply(htmltools::HTML)
m <- m %>% addPolygons(
fillColor = ~pal(density),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
m
#Custom infos
#We’ll generate the labels by handcrafting some HTML, and passing it to lapply(htmltools::HTML) so that Leaflet knows to treat each label as HTML instead of as plain text. We’ll also set some label options to improve the style of the label element itself.
labels <- sprintf(
paste0("<strong>", states$name,
"</strong><br />Densitiy: ", states$density,
"<br /> Region: ", df$region,
"<br /> Having Diabetes Coinsurance mean: ", mean(hc$coinsurance),
"<br /> Businessyear: ", hc$BusinessYear,
"<br /> value: ", df$x
)
)  %>% lapply(htmltools::HTML)
m <- m %>% addPolygons(
fillColor = ~pal(density),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
m
#get summary of the states, coinsurance and region (Length, Median, mean...)
summary(df)
#Custom infos
#We’ll generate the labels by handcrafting some HTML, and passing it to lapply(htmltools::HTML) so that Leaflet knows to treat each label as HTML instead of as plain text. We’ll also set some label options to improve the style of the label element itself.
labels <- sprintf(
paste0("<strong>", states$name,
"</strong><br />Densitiy: ", states$density,
"<br /> Region: ", df$region,
"<br /> Having Diabetes Coinsurance mean: ", mean(hc$coinsurance),
"<br /> Businessyear: ", hc$BusinessYear,
"<br /> value: ", if(df$region == df$region && hc$BusinessYear==14) {mean(hc$coinsurance)}
)
)  %>% lapply(htmltools::HTML)
m <- m %>% addPolygons(
fillColor = ~pal(density),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
m
#Custom infos
#We’ll generate the labels by handcrafting some HTML, and passing it to lapply(htmltools::HTML) so that Leaflet knows to treat each label as HTML instead of as plain text. We’ll also set some label options to improve the style of the label element itself.
labels <- sprintf(
paste0("<strong>", states$name,
"</strong><br />Densitiy: ", states$density,
"<br /> Region: ", df$region,
"<br /> Having Diabetes Coinsurance mean: ", mean(hc$coinsurance),
"<br /> Businessyear: ", hc$BusinessYear,
"<br /> value: ", if(df$region == df$region && hc$BusinessYear==2014) {mean(hc$coinsurance)}
)
)  %>% lapply(htmltools::HTML)
m <- m %>% addPolygons(
fillColor = ~pal(density),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
m
