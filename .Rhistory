style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
m
labels <- sprintf(
"Country" + state.name
) %>% lapply(htmltools::HTML)
labels <- sprintf(
as.numeric("Country") + state.name
) %>% lapply(htmltools::HTML)
labels <- sprintf(
paste0("Country: ", state.name)
) %>% lapply(htmltools::HTML)
m <- m %>% addPolygons(
fillColor = myPalette(9),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
m
labels <- sprintf(
paste0("Country: ", state.name),
paste0("Country: ", state.name)
) %>% lapply(htmltools::HTML)
m <- m %>% addPolygons(
fillColor = myPalette(9),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
m
labels <- sprintf(
paste0("Country: ", state.name), "<br/>",
paste0("Country: ", state.name)
) %>% lapply(htmltools::HTML)
m <- m %>% addPolygons(
fillColor = myPalette(9),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
m
labels <- sprintf(
cbind(paste0("Country: ", state.name),
paste0("Country: ", state.name))
) %>% lapply(htmltools::HTML)
m <- m %>% addPolygons(
fillColor = myPalette(9),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
m
labels <- sprintf(
"<strong>%s</strong><br/>%g people / mi<sup>2</sup>",
) %>% lapply(htmltools::HTML)
m <- m %>% addPolygons(
fillColor = myPalette(9),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
m
labels <- sprintf(
"<strong>%s</strong><br/>%g people / mi<sup>2</sup>",
) %>% lapply(htmltools::HTML)
labels <- sprintf(
"<strong>%s</strong><br/>%g people / mi<sup>2</sup>"
) %>% lapply(htmltools::HTML)
labels <- sprintf(
"<strong>%s</strong><br/>%g people / mi<sup>2</sup>", states$NAME
) %>% lapply(htmltools::HTML)
labels <- sprintf(
"<strong>%s</strong><br/>%g people / mi<sup>2</sup>", states.name
) %>% lapply(htmltools::HTML)
labels <- sprintf(
"<strong>%s</strong><br/>%g people / mi<sup>2</sup>", state.name
) %>% lapply(htmltools::HTML)
labels <- sprintf(
"<strong>%s</strong><br/>%g people / mi<sup>2</sup>", state.name, state.name
) %>% lapply(htmltools::HTML)
labels <- sprintf(
"<strong>%s</strong><br/>%m people / mi<sup>2</sup>", state.name, state.name
) %>% lapply(htmltools::HTML)
labels <- sprintf(
print("Country: ", state.name + "<br/>" + state.name),
) %>% lapply(htmltools::HTML)
labels <- sprintf(
print("Country: ", state.name, "<br/>" + state.name),
) %>% lapply(htmltools::HTML)
labels <- sprintf(
print("Country: ", state.name, "<br/>", state.name),
) %>% lapply(htmltools::HTML)
labels <- sprintf(
print("Country: ", state.name),
print(state.name)
) %>% lapply(htmltools::HTML)
labels <- sprintf(
print("Country: ", state.name),
print(state.name)
) %>% lapply(htmltools::HTML)
labels <- sprintf(
print("Country: ", state.name)
) %>% lapply(htmltools::HTML)
labels <- sprintf(
print("Country: " state.name)
) %>% lapply(htmltools::HTML)
labels <- sprintf(
paste0("Country: ", state.name)
) %>% lapply(htmltools::HTML)
m <- m %>% addPolygons(
fillColor = myPalette(9),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
m
labels <- sprintf(
writeLines("This is line.",con=printer,sep=" ")
writeLines("The same line.",con=printer)
paste0("State: ", state.name)
) %>% lapply(htmltools::HTML)
labels <- sprintf(
writeLines("This is line.",con=printer,sep=" "),
writeLines("The same line.",con=printer),
paste0("State: ", state.name)
) %>% lapply(htmltools::HTML)
labels <- sprintf(
paste0("State: ", state.name)
) %>% lapply(htmltools::HTML)
library(ggplot2)
library(readr)
library(dplyr)
library(RColorBrewer)
library(DT)
library(choroplethrMaps)
library(choroplethr)
##Setwd for musab elkour
setwd("C:/dev/bi_project")
hc <- read.csv("PlanAttributes.csv", stringsAsFactors = FALSE)
hc <- subset(hc, BusinessYear == "2014")
hc <- subset(hc, DentalOnlyPlan == "No")
print(hc)
print(hc, BusinessYear == "2014")
print(hc$BusinessYear == "2014")
hc <- subset(hc$BusinessYear == "2014")
print(subset(hc, BusinessYear == "2014"))
hc <- subset(hc, DentalOnlyPlan == "No")
print(subset(hc, DentalOnlyPlan == "No"))
#prints all the data in the columns which the DentalOnlyPlan is equal "No"
hc <- subset(hc, DentalOnlyPlan == "No")
print(subset(hc, DentalOnlyPlan == "No"))
head(hc$SBCHavingDiabetesCoinsurance, 100)
#A quick glimpse and then some data cleaning
head(hc$SBCHavingDiabetesCoinsurance, 100)
#A quick glimpse and then some data cleaning
head(hc$SBCHavingDiabetesCoinsurance, 50)
#A quick glimpse and then some data cleaning
head(hc$SBCHavingDiabetesCoinsurance, 50000)
#A quick glimpse and then some data cleaning
head(hc$SBCHavingDiabetesCoinsurance, 10000)
#A quick glimpse and then some data cleaning of SBCHavingDiabetesCoinsurance (The dollar amount of the coinsurance for the sample SBC scenario of having diabetes)
#Coinsurance = Eine Mitversicherung ist die Beteiligung mehrerer Versicherungsunternehmen an der Versicherung desselben Risikos
#SBC= Summary of Benefits and Coverage Provides Clear and Consistent Information == allowing employers and employees to make apples-to-apples comparisons among plans, understand what is covered and what it costs
head(hc$SBCHavingDiabetesCoinsurance, 100)
hc$SBCHavingDiabetesCoinsurance<- gsub('\\$', '', hc$SBCHavingDiabetesCoinsurance)
hc$SBCHavingDiabetesCoinsurance<- gsub(',', '', hc$SBCHavingDiabetesCoinsurance)
hc$coinsurance <- as.numeric(hc$SBCHavingDiabetesCoinsurance)
hc$coinsurance[is.na(hc$coinsurance)] <- 0
head(hc$coinsurance, 100)
# replace all "," with " " AND all "\\$" with " " in SBCHavingDiabetesCoinsurance
hc$SBCHavingDiabetesCoinsurance<- gsub('\\$', '', hc$SBCHavingDiabetesCoinsurance)
hc$SBCHavingDiabetesCoinsurance<- gsub(',', '', hc$SBCHavingDiabetesCoinsurance)
hc$coinsurance <- as.numeric(hc$SBCHavingDiabetesCoinsurance)
hc$coinsurance[is.na(hc$coinsurance)] <- 0
head(hc$coinsurance, 100)
# fill the blank cells with 0
hc$coinsurance[is.na(hc$coinsurance)] <- 0
head(hc$coinsurance, 100)
# fill the blank cells with 0
# fill the blank cells with 0
planAttributes$moop[is.na(planAttributes$moop)] <- 0
head(hc$coinsurance, 100)
hc$coinsurance <- as.numeric(hc$SBCHavingDiabetesCoinsurance)
# fill the blank cells with 0
hc$coinsurance[is.na(hc$coinsurance)] <- 0
head(hc$coinsurance, 100)
counts <- table(hc$coinsurance)
barplot(counts, main="the coinsurance for the sample SBC scenario of having diabetes",
xlab="Dollar Amount")
# plot histogram of moop
ggplot(counts, aes(x = hc$coinsurance)) + geom_histogram()
# plot histogram of moop
ggplot(hc$coinsurance, aes(x = hc$coinsurance)) + geom_histogram()
# plot histogram of moop
ggplot(hc, aes(x = hc$coinsurance)) + geom_histogram()
# plot histogram of moop
ggplot(hc, aes(x = hc$coinsurance), color="yellow") + geom_histogram()
# plot histogram of moop
ggplot(hc, aes(x = hc$coinsurance), color="red") + geom_histogram()
# plot histogram of moop
ggplot(hc, aes(x = hc$coinsurance)) + geom_histogram(color="yellow")
# plot histogram of moop
ggplot(hc, aes(x = hc$coinsurance)) + geom_histogram(fillcolor="yellow")
# plot histogram of moop
ggplot(hc, aes(x = hc$coinsurance)) + geom_histogram(color="yellow")
# plot histogram of coinsurance
ggplot(hc, aes(x = hc$coinsurance)) + geom_histogram(color="yellow")
counts <- table(hc$coinsurance)
barplot(counts, main="the coinsurance for the sample SBC scenario of having diabetes",
xlab="Dollar Amount")
barplot(counts, main="the coinsurance for the sample SBC scenario of having diabetes",
xlab="Dollar Amount", color="yellow")
barplot(counts, main="the coinsurance for the sample SBC scenario of having diabetes",
xlab="Dollar Amount")
coinsurance
# plot histogram of coinsurance
ggplot(hc, aes(x = hc$coinsurance)) + geom_histogram(color="yellow")
counts <- table(hc$coinsurance)
barplot(counts, main="The coinsurance for the sample SBC scenario of having diabetes",
xlab="Dollar Amount")
# plot histogram of coinsurance
ggplot(hc, aes(x = hc$coinsurance)) + geom_histogram(color="yellow")
counts <- table(hc$coinsurance)
barplot(counts, main="The coinsurance for the sample SBC scenario of having diabetes",
xlab="Dollar Amount")+ geom_histogram(color="yellow")
# plot histogram of coinsurance
ggplot(hc, aes(x = hc$coinsurance)) + geom_histogram(color="yellow")
# plot histogram of coinsurance
ggplot(hc, aes(x = hc$coinsurance)) + geom_histogram(color="red")
# plot histogram of coinsurance
ggplot(hc, aes(x = hc$coinsurance)) + geom_histogram(color="orange")
# plot histogram of coinsurance
ggplot(hc, aes(x = hc$coinsurance)) + geom_histogram(color="green")
#barplot of coinsurance
barplot(counts, main="The coinsurance for the sample SBC scenario of having diabetes",
xlab="Dollar Amount")
# plot histogram of coinsurance
ggplot(hc, aes(x = hc$coinsurance)) + geom_histogram(color="green")
#barplot of coinsurance
barplot(counts, main="The coinsurance for the sample SBC scenario of having diabetes",
xlab="Dollar Amount")
# plot histogram of coinsurance
ggplot(hc, aes(x = hc$coinsurance)) + geom_histogram(color="green")
#barplot of coinsurance
barplot(counts, main="The coinsurance for the sample SBC scenario of having diabetes",
xlab="Dollar Amount")
#barplot of coinsurance
barplot(counts, main="The coinsurance for the sample SBC scenario of having diabetes",
xlab="Dollar Amount", ylab="Counts")
# plot histogram of coinsurance
ggplot(hc, aes(x = hc$coinsurance)) + geom_histogram(color="green")
# plot histogram of coinsurance
ggplot(hc, aes(x = "MUSab")) + geom_histogram(color="green")
hc$coinsurance
# plot histogram of coinsurance
ggplot(hc, aes(x = hc$coinsurance)) + geom_histogram(color="green")
# plot histogram of coinsurance
ggplot(hc, aes(x = hc$coinsurance), xlab="Dollar amount") + geom_histogram(color="green")
# plot histogram of coinsurance
ggplot(hc, aes(x = hc$coinsurance) + geom_histogram(color="green", xlab="Dollar amount")
# plot histogram of coinsurance
ggplot(hc, aes(x = hc$coinsurance) + geom_histogram(color="green", xlab="Dsfd"))
# plot histogram of coinsurance
ggplot(hc, aes(x = hc$coinsurance) + geom_histogram(color="green"))
df <- aggregate(hc$coinsurance, list(hc$StateCode), mean)
df
df
names(df) <- c("state", "coinsurance")
df
df$region<-stateFromLower(df$state)
df$value <- df$overall
df$region<-stateFromLower(df$state)
df$value <- df$overall
summary(df)
source("function_stateFromLower.R")
df$region<-stateFromLower(df$state)
df$value <- df$overall
summary(df)
#calling the states from the function stateFromLower
df$region<-stateFromLower(df$state)
df$value <- df$overall
summary(df)
coinsurance <- subset(hc, coinsurance > 0)
#Subset of all the coinsurances above 0
coinsurance <- subset(hc, coinsurance > 0)
df <- aggregate(hc$coinsurance, list(hc$StateCode), mean)
df$region<-stateFromLower(df$Group.1)
df$value <- df$x
choro = StateChoropleth$new(df)
choro$title = "the coinsurance for the sample SBC scenario of having diabetes"
choro$set_num_colors(1)
myPalette <- colorRampPalette(brewer.pal(9, "Reds"))
choro$ggplot_polygon = geom_polygon(aes(fill = value), color = NA)
choro$ggplot_scale = scale_fill_gradientn(name = "Dollar amount", colours = myPalette(9))
choro$render()
df <- aggregate(hc$coinsurance, list(hc$StateCode), mean)
df$region<-stateFromLower(df$Group.1)
df$value <- df$x
choro = StateChoropleth$new(df)
choro$title = "the coinsurance for the sample SBC scenario of having diabetes"
choro$set_num_colors(1)
myPalette <- colorRampPalette(brewer.pal(9, "greens"))
choro$ggplot_polygon = geom_polygon(aes(fill = value), color = NA)
choro$ggplot_scale = scale_fill_gradientn(name = "Dollar amount", colours = myPalette(9))
choro$render()
df <- aggregate(hc$coinsurance, list(hc$StateCode), mean)
df$region<-stateFromLower(df$Group.1)
df$value <- df$x
choro = StateChoropleth$new(df)
choro$title = "the coinsurance for the sample SBC scenario of having diabetes"
choro$set_num_colors(1)
myPalette <- colorRampPalette(brewer.pal(9, "greens"))
choro$ggplot_polygon = geom_polygon(aes(fill = value), color = NA)
choro$ggplot_scale = scale_fill_gradientn(name = "Dollar amount", colours = myPalette(9))
choro$render()
df <- aggregate(hc$coinsurance, list(hc$StateCode), mean)
df$region<-stateFromLower(df$Group.1)
df$value <- df$x
choro = StateChoropleth$new(df)
choro$title = "the coinsurance for the sample SBC scenario of having diabetes"
choro$set_num_colors(1)
myPalette <- colorRampPalette(brewer.pal(9, "Greens"))
choro$ggplot_polygon = geom_polygon(aes(fill = value), color = NA)
choro$ggplot_scale = scale_fill_gradientn(name = "Dollar amount", colours = myPalette(9))
choro$render()
surance, list(hc$StateCode), mean)
df$region<-stateFromLower(df$state)
df$value <- df$x
choro = StateChoropleth$new(df)
choro$title = "the coinsurance for the sample SBC scenario of having diabetes"
choro$set_num_colors(1)
myPalette <- colorRampPalette(brewer.pal(9, "Greens"))
choro$ggplot_polygon = geom_polygon(aes(fill = value), color = NA)
choro$ggplot_scale = scale_fill_gradientn(name = "Dollar amount", colours = myPalette(9))
choro$render()
surance, list(hc$StateCode), mean)
df$region<-stateFromLower(df$state)
df$value <- df$x
choro = StateChoropleth$new(df)
choro$title = "the coinsurance for the sample SBC scenario of having diabetes"
choro$set_num_colors(1)
myPalette <- colorRampPalette(brewer.pal(9, "Greens"))
choro$ggplot_polygon = geom_polygon(aes(fill = value), color = NA)
choro$ggplot_scale = scale_fill_gradientn(name = "Dollar amount", colours = myPalette(9))
choro$render()
#calling the states from the function stateFromLower
df$region<-stateFromLower(df$state)
#------------------------choro Map creation -------------------------------------
#Aggregate the coinsurance with statecodes
df <- aggregate(hc$coinsurance, list(hc$StateCode), mean)
#calling the states from the function stateFromLower
df$region<-stateFromLower(df$state)
df$value <- df$x
#calling the states from the function stateFromLower
df$region<-stateFromLower(df$Group.1)
df$value <- df$x
# set title to the new choro map
choro$title = "  The coinsurance for the sample SBC scenario of having diabetes"
#Aggregate the coinsurance with statecodes
df <- aggregate(hc$coinsurance, list(hc$StateCode), mean)
#calling the states from the function stateFromLower
# Group.i for by[[i]]. -> in this case first group "Group.1" is group of all states
df$region<-stateFromLower(df$Group.1)
df$value <- df$x
#generate new choro object
choro = StateChoropleth$new(df)
# set title to the new choro map
choro$title = "  The coinsurance for the sample SBC scenario of having diabetes"
choro$set_num_colors(1)
myPalette <- colorRampPalette(brewer.pal(9, "Greens"))
choro$ggplot_polygon = geom_polygon(aes(fill = value), color = NA)
choro$ggplot_scale = scale_fill_gradientn(name = "Dollar amount", colours = myPalette(9))
choro$render()
df <- aggregate(hc$coinsurance, list(hc$StateCode), mean)
#calling the states from the function stateFromLower
# Group.i for by[[i]]. -> in this case first group "Group.1" is group of all states
df$region<-stateFromLower(df$Group.1)
df$value <- df$x
#generate new choro object
choro = StateChoropleth$new(df)
# set title to the new choro map
choro$title = "    The coinsurance for the sample SBC scenario of having diabetes"
choro$set_num_colors(1)
myPalette <- colorRampPalette(brewer.pal(9, "Greens"))
choro$ggplot_polygon = geom_polygon(aes(fill = value), color = NA)
choro$ggplot_scale = scale_fill_gradientn(name = "Dollar amount", colours = myPalette(9))
choro$render()
myPalette <- colorRampPalette(brewer.pal(9, "Greens"))
df$region<-stateFromLower(df$Group.1)
df$value <- df$x
#generate new choro object
choro = StateChoropleth$new(df)
# set title to the new choro map
choro$title = "    The coinsurance for the sample SBC scenario of having diabetes"
# The number of colors to use on the map. A value of 0 uses a divergent scale
choro$set_num_colors(1)
# These functions are useful for converting hand-designed `sequential' or `diverging' color
# here green levels set
myPalette <- colorRampPalette(brewer.pal(9, "Greens"))
choro$ggplot_polygon = geom_polygon(aes(fill = value), color = yellow)
choro$ggplot_scale = scale_fill_gradientn(name = "Dollar amount", colours = myPalette(9))
choro$render()
df$value <- df$x
#generate new choro object
choro = StateChoropleth$new(df)
# set title to the new choro map
choro$title = "    The coinsurance for the sample SBC scenario of having diabetes"
# The number of colors to use on the map. A value of 0 uses a divergent scale
choro$set_num_colors(1)
# These functions are useful for converting hand-designed `sequential' or `diverging' color
# here green levels set
myPalette <- colorRampPalette(brewer.pal(9, "Greens"))
choro$ggplot_polygon = geom_polygon(aes(fill = value), color = "yellow")
choro$ggplot_scale = scale_fill_gradientn(name = "Dollar amount", colours = myPalette(9))
choro$render()
choro$ggplot_polygon = geom_polygon(aes(fill = value), color = "black")
choro$ggplot_scale = scale_fill_gradientn(name = "Dollar amount", colours = myPalette(9))
choro$render()
df$region<-stateFromLower(df$Group.1)
df$value <- df$x
#generate new choro object
choro = StateChoropleth$new(df)
# set title to the new choro map
choro$title = "    The coinsurance for the sample SBC scenario of having diabetes"
# The number of colors to use on the map. A value of 0 uses a divergent scale
choro$set_num_colors(1)
# These functions are useful for converting hand-designed `sequential' or `diverging' color
# here green levels set
myPalette <- colorRampPalette(brewer.pal(9, "Greens"))
#fill value and border color
choro$ggplot_polygon = geom_polygon(aes(fill = value), color = "black")
#legend
choro$ggplot_scale = scale_fill_gradientn(name = "Dollar amount", colours = myPalette(9))
#show and visualizie the choro map
choro$render()
coinsurance <- subset(coinsurance, BusinessYear == "2014")
dim(coinsurance)
coinsurance <- subset(coinsurance, BusinessYear == "2015")
dim(coinsurance)
